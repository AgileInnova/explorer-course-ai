"use strict";(self.webpackChunkexplorer_course=self.webpackChunkexplorer_course||[]).push([[7450],{3905:(e,a,o)=>{o.d(a,{Zo:()=>p,kt:()=>m});var r=o(7294);function n(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function t(e,a){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),o.push.apply(o,r)}return o}function s(e){for(var a=1;a<arguments.length;a++){var o=null!=arguments[a]?arguments[a]:{};a%2?t(Object(o),!0).forEach((function(a){n(e,a,o[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(o,a))}))}return e}function l(e,a){if(null==e)return{};var o,r,n=function(e,a){if(null==e)return{};var o,r,n={},t=Object.keys(e);for(r=0;r<t.length;r++)o=t[r],a.indexOf(o)>=0||(n[o]=e[o]);return n}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)o=t[r],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=r.createContext({}),d=function(e){var a=r.useContext(i),o=a;return e&&(o="function"==typeof e?e(a):s(s({},a),e)),o},p=function(e){var a=d(e.components);return r.createElement(i.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var o=e.components,n=e.mdxType,t=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(o),m=n,b=u["".concat(i,".").concat(m)]||u[m]||c[m]||t;return o?r.createElement(b,s(s({ref:a},p),{},{components:o})):r.createElement(b,s({ref:a},p))}));function m(e,a){var o=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var t=o.length,s=new Array(t);s[0]=u;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var d=2;d<t;d++)s[d]=o[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},1754:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=o(7462),n=(o(7294),o(3905));const t={sidebar_position:9},s="Objetos",l={unversionedId:"tutorial-js/objetos",id:"tutorial-js/objetos",title:"Objetos",description:"Conceptos b\xe1sicos de los Objetos",source:"@site/docs/tutorial-js/objetos.md",sourceDirName:"tutorial-js",slug:"/tutorial-js/objetos",permalink:"/explorer-course-ai/docs/tutorial-js/objetos",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Arreglos",permalink:"/explorer-course-ai/docs/tutorial-js/arreglos"},next:{title:"\ud83d\udcbb HTML - CSS",permalink:"/explorer-course-ai/docs/category/-html---css"}},i={},d=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Objetos Literales",id:"objetos-literales",level:2},{value:"Acceder a las propiedades de un objeto",id:"acceder-a-las-propiedades-de-un-objeto",level:2},{value:"Actualizar las propiedades de un objeto",id:"actualizar-las-propiedades-de-un-objeto",level:2},{value:"Agregar nuevas propiedades a un objeto",id:"agregar-nuevas-propiedades-a-un-objeto",level:2},{value:"Eliminar propiedades de un objeto",id:"eliminar-propiedades-de-un-objeto",level:2},{value:"Comprobaci\xf3n de las propiedades de los objetos",id:"comprobaci\xf3n-de-las-propiedades-de-los-objetos",level:2},{value:"Crear m\xe9todos en un objeto",id:"crear-m\xe9todos-en-un-objeto",level:2},{value:"Evitar la mutaci\xf3n de objetos",id:"evitar-la-mutaci\xf3n-de-objetos",level:2},{value:"Abreviatura de propiedades de objetos",id:"abreviatura-de-propiedades-de-objetos",level:2},{value:"Obtener todas las propiedades y valores de un objeto",id:"obtener-todas-las-propiedades-y-valores-de-un-objeto",level:2},{value:"For ... in",id:"for--in",level:2},{value:"Referencias",id:"referencias",level:3},{value:"Contenido adicional",id:"contenido-adicional",level:2},{value:"Diferencias",id:"diferencias",level:3},{value:"A\xf1adir item o propiedad",id:"a\xf1adir-item-o-propiedad",level:4},{value:"Obtener el valor de un item o propiedad",id:"obtener-el-valor-de-un-item-o-propiedad",level:4},{value:"Eliminar item o propiedad",id:"eliminar-item-o-propiedad",level:4},{value:"Eliminar todos los \xedtems o propiedades almacenados.",id:"eliminar-todos-los-\xedtems-o-propiedades-almacenados",level:4}],p={toc:d};function c(e){let{components:a,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,o,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"objetos"},"Objetos"),(0,n.kt)("p",null,"Conceptos b\xe1sicos de los ",(0,n.kt)("strong",{parentName:"p"},"Objetos")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parte 1")),(0,n.kt)("iframe",{width:"80%",height:"315",src:"https://www.youtube.com/embed/p7GDvLyOknU",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parte 2")),(0,n.kt)("iframe",{width:"80%",height:"315",src:"https://www.youtube.com/embed/0JGFvNRzauY",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,n.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,n.kt)("p",null,"Los objetos son un tipo de dato en JavaScript, como lo son number, string, boolean, undefined... Los objetos son en cierta forma diferentes a estos porque permiten agrupar varios datos de forma estructurada."),(0,n.kt)("p",null,"La idea de los objetos viene del mundo real. En nuestro mundo un objeto tiene una serie de caracter\xedsticas (propiedades) y puede realizar una serie de acciones (m\xe9todos). Si pensamos en algo tan sencillo como un l\xe1piz podremos ver que algunas de sus propiedades podr\xedan ser color de la mina, nivel de afilado, cantidad de mina restante, etc. Por otro lado, sus acciones ser\xedan muy reducidas y b\xe1sicamente se resumir\xeda en una, pintar."),(0,n.kt)("h2",{id:"objetos-literales"},"Objetos Literales"),(0,n.kt)("p",null,"Los objetos son abstracciones inspiradas en el mundo real que permiten estructurar objetos ficticios en JavaScript de forma simple usando grupos de pares de clave/valor. Podemos crear propiedades, que representan las caracter\xedsticas, y m\xe9todos, que representan las acciones que podr\xe1n llevar a cabo esos objetos. Cuando hablamos de clave/valor lo podemos interpretar como un diccionario, es decir, tenemos una palabra y un significado, en este caso la palabra ser\xeda la clave y por medio de esta puedo acceder al significado (valor).\nUsamos objetos en JavaScript para crear estructuras que agrupen datos y a las que se pueda acceder de forma sencilla sin necesidad de comprender la complejidad que albergan."),(0,n.kt)("p",null,"Pasos para crear un objeto:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Indicamos el nombre de la variable donde guardamos el objeto, por ejemplo, geekGirl"),(0,n.kt)("li",{parentName:"ul"},"El contenido del objeto ir\xe1 entre llaves { }"),(0,n.kt)("li",{parentName:"ul"},"Dentro de las llaves ponemos parejas clave: valor, donde la clave ser\xe1 el nombre de la propiedad\ny el valor puede ser de cualquier tipo de datos (cadena, n\xfamero, booleano...), por ejemplo, name: 'Mar\xeda'"),(0,n.kt)("li",{parentName:"ul"},"Separamos cada pareja clave: valor con una coma")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'const geekGirl = {\n   "name": \'Mar\xeda\',\n   "age": 31,\n   "is married": false\n};\n')),(0,n.kt)("p",null,"Todas las claves o propiedades se almacenan como cadenas. Sin embargo, tambi\xe9n puedes utilizar n\xfameros como propiedades. Incluso puedes omitir las comillas para las claves o propiedades de cadena de una sola palabra, como se indica en el siguiente ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const geekGirl = {\n   name: 'Mar\xeda',\n   age: 31,\n   \"is married\": false,\n    6: true\n};\n")),(0,n.kt)("p",null,"Sin embargo, si tu objeto tiene propiedades que no son cadenas, JavaScript las tipificar\xe1 autom\xe1ticamente como cadenas. Como los objetos tambi\xe9n son tipos de datos, una propiedad de un objeto podr\xeda ser tambi\xe9n un objeto. Por ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const geekGirl = {\n   name: 'Mar\xeda',\n   age: 31,\n   \"is married\": false,\n   address: {\n      street: 'Colegiata',\n      number: 9\n    }\n};\n")),(0,n.kt)("h2",{id:"acceder-a-las-propiedades-de-un-objeto"},"Acceder a las propiedades de un objeto"),(0,n.kt)("p",null,"Para acceder (leer) al valor de una propiedad de un objeto, podemos hacerlo de dos formas:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Al nombre del objeto (el nombre de la variable) le ponemos detr\xe1s un punto ",(0,n.kt)("inlineCode",{parentName:"li"},".")," y luego el nombre de la propiedad. La notaci\xf3n por puntos es la que se utiliza cuando se conoce de antemano el nombre de la propiedad a la que se intenta acceder."),(0,n.kt)("li",{parentName:"ul"},"Al nombre del objeto (el nombre de la variable) le ponemos detr\xe1s unos corchetes ",(0,n.kt)("inlineCode",{parentName:"li"},"[ ]")," y dentro el nombre de la propiedad como una cadena (entre comillas simples o dobles). Si la propiedad del objeto a la que est\xe1 intentando acceder tiene un espacio en su nombre, tendr\xe1 que utilizar la notaci\xf3n de corchetes.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// Muestra en la consola 'Mar\xeda'\nconsole.log(geekGirl.name);\n\n// Muestra en la consola 'Mar\xeda'\nconsole.log(geekGirl['name']);\n\n// Muestra en la consola 'true'\nconsole.log(geekGirl['is married']);\n")),(0,n.kt)("p",null,"Otro uso de la notaci\xf3n de corchetes en los objetos es para acceder a una propiedad que se almacena como el valor de una variable. Esto puede ser muy \xfatil para iterar a trav\xe9s de las propiedades de un objeto o cuando se accede a una tabla de b\xfasqueda."),(0,n.kt)("p",null,"Este es un ejemplo de uso de una variable para acceder a una propiedad:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'const perros = {\n  Lupe: {\n   raza: "Jack Rusell Terrier",\n   tamano: "Mediano", \n   peso: "12 kg"\n   imagen: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ5iHljCf96dsRiNkANC-O49L-NvgK53Pce5g&usqp=CAU"\n  }, \n  Chispas: {\n   raza: "Labrador",\n   tamano: "Mediano", \n   peso: "20 kg"\n   imagen: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR1IQbWwjUGTjOZD2wyFs0hHepVqxWU2RTSkw&usqp=CAU"\n  }\n};\n\nconst miPrimerPerro = "Chispas";\nconst miSegundoPerro = "Lupe";\n\nconst razaPrimerPerro = perros[miPrimerPerro];\nconst pesoSegundoPerro = perros[miSegundoPerro];\n\nconsole.log(razaPrimerPerro);\nconsole.log(pesoSegundoPerro);\n')),(0,n.kt)("p",null,"Las cadenas Jack Rusell Terrier y 20 kg se mostrarian en la consola. "),(0,n.kt)("p",null,"Otra forma de utilizar este concepto es cuando el nombre de la propiedad se recoge din\xe1micamente durante la ejecuci\xf3n del programa"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'const cualquier_obj = {\n  nombre_propiedad: "Valor propiedad"\n};\n\nfunction prefijoPropiedad(str) {\n  const s = "_propiedad";\n  return str + s;\n}\n\nconst cualquier_propiedad = prefijoPropiedad("nombre");\nconsole.log(cualquier_obj[cualquier_propiedad]);\n')),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"cualquier_propiedad")," tendr\xeda un valor de la cadena 'nombre_propiedad', y la cadena 'Valor propiedad' se mostrar\xeda en la consola.\nObserva que no usamos comillas alrededor del nombre de la variable cuando la usamos para acceder a la propiedad porque estamos usando el valor de la variable, no el nombre."),(0,n.kt)("h2",{id:"actualizar-las-propiedades-de-un-objeto"},"Actualizar las propiedades de un objeto"),(0,n.kt)("p",null,"Despu\xe9s de crear un objeto de JavaScript, puedes actualizar sus propiedades en cualquier momento, igual que actualizar\xedas cualquier otra variable. Puedes utilizar la notaci\xf3n de puntos o corchetes para actualizar. "),(0,n.kt)("p",null,"Actualicemos el objeto ",(0,n.kt)("inlineCode",{parentName:"p"},"perros")," que vimos en un ejemplo de la ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/academia-geek/Classroom-Aprendices-Geek-Backend/blob/main/Modulo-2/07-Objetos/README.md#acceder-a-las-propiedades-de-un-objeto"},"secci\xf3n anterior"),", hagamos de cuenta que necesitamos que la propiedad ",(0,n.kt)("inlineCode",{parentName:"p"},"Lupe")," ya no tenga un objeto con m\xe1s informaci\xf3n de ella, su key seguir\xe9 siendo ",(0,n.kt)("inlineCode",{parentName:"p"},"Lupe")," y su valor ser\xe1 una corta descripci\xf3n de este perro. Veamos esto en c\xf3digo JavaScript:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'perros.Lupe = "Es una perra adulta, es mediana, de color blanco, con manchas cafes y es muy traviesa";\nconsole.log(perros.Lupe);\n')),(0,n.kt)("p",null,"Cuando se imprima por consola el valor de la propiedad ",(0,n.kt)("inlineCode",{parentName:"p"},"Lupe")," se mostrar\xe1 su nuevo valor: ",(0,n.kt)("inlineCode",{parentName:"p"},"Es una perra adulta, es mediana, de color blanco, con manchas cafes y es muy travieza"),", en vez del objeto que teniamos anteriormente con raza, tamano, peso e imagen.\nActualizando este mismo objeto con la notaci\xf3n de corchetes se tendr\xedan los mismos resultados, esto en c\xf3digo se ver\xeda as\xed: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"perros['Lupe'] = \"Es una perra adulta, es mediana, de color blanco, con manchas cafes y es muy travieza\";\nconsole.log(perros['Lupe']);\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Nota:")," Tambi\xe9n puedes actualizar una propiedad con un valor que se recoge din\xe1micamente durante la ejecuci\xf3n del programa por medio de la notaci\xf3n entre corchetes de forma muy parecida a como se mostr\xf3 en el ejemplo anterior donde accediamos al valor de una propiedad de forma din\xe1mica. "),(0,n.kt)("h2",{id:"agregar-nuevas-propiedades-a-un-objeto"},"Agregar nuevas propiedades a un objeto"),(0,n.kt)("p",null,"Puedes a\xf1adir nuevas propiedades a los objetos JavaScript existentes de la misma manera que los modificar\xedas. "),(0,n.kt)("p",null,"Ahora creemos un objeto de una forma diferente a como lo veniamos realizando, vamos a crear primero un objeto vac\xedo y luego le vamos a ir a\xf1adiendo las propiedades en las siguientes instrucciones. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'const perros = {};\n\nperros.Lupe = {\n   raza: "Jack Rusell Terrier",\n   tamano: "Mediano", \n   peso: "12 kg"\n   imagen: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ5iHljCf96dsRiNkANC-O49L-NvgK53Pce5g&usqp=CAU"\n}\n\nperros.Chispas = {\n   raza: "Labrador",\n   tamano: "Mediano", \n   peso: "20 kg"\n   imagen: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR1IQbWwjUGTjOZD2wyFs0hHepVqxWU2RTSkw&usqp=CAU"\n}\n\nperros.Lucas = "A\xfan no hay informaci\xf3n disponible sobre este perrito"\n\n// Muestra en la consola: A\xfan no hay informaci\xf3n disponible sobre este perrito\nconsole.log(perros.Lucas);\n')),(0,n.kt)("p",null,"Acabamos de a\xf1adirle 3 propiedades nuevas a un objeto vac\xedo. "),(0,n.kt)("h2",{id:"eliminar-propiedades-de-un-objeto"},"Eliminar propiedades de un objeto"),(0,n.kt)("p",null,"Tambi\xe9n podemos eliminar las propiedades de los objetos de esta manera:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"delete perros.Lucas\n")),(0,n.kt)("p",null,"Ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},' const perros = {\n   Lupe: "Es una perra adulta, es mediana, de color blanco, con manchas cafes y es muy traviesa", \n   Chispas: "Es una perra adulta, es grande, de color caf\xe9, con manchas negras y es obediente", \n   Lucas: "A\xfan no hay informaci\xf3n disponible sobre este perrito"\n };\n \n delete perros.Lucas;\n')),(0,n.kt)("p",null,"Despu\xe9s de esto, nuestro objeto ",(0,n.kt)("inlineCode",{parentName:"p"},"perros")," se ve de la siguiente forma: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},' const perros = {\n   Lupe: "Es una perra adulta, es mediana, de color blanco, con manchas cafes y es muy traviesa", \n   Chispas: "Es una perra adulta, es grande, de color caf\xe9, con manchas negras y es obediente"\n }\n')),(0,n.kt)("h2",{id:"comprobaci\xf3n-de-las-propiedades-de-los-objetos"},"Comprobaci\xf3n de las propiedades de los objetos"),(0,n.kt)("p",null,"A veces es \xfatil comprobar si la propiedad de un objeto dado existe o no. Podemos utilizar el m\xe9todo ",(0,n.kt)("inlineCode",{parentName:"p"},".hasOwnProperty(nombrepropiedad)")," de los objetos para determinar si ese objeto tiene el nombre de la propiedad dada. ",(0,n.kt)("inlineCode",{parentName:"p"},".hasOwnProperty()")," devuelve true o false si la propiedad se encuentra o no."),(0,n.kt)("p",null,"Ejemplo: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'const miObjeto = {\n   tamano: "Grande", \n   color: "Az\xfal", \n   precio: 2.000\n};\n\nmiObjeto.hasOwnProperty("tamano");\nmiObjeto.hasOwnProperty("cantidad");\n')),(0,n.kt)("p",null,"La primera ",(0,n.kt)("inlineCode",{parentName:"p"},"hasOwnProperty")," devuelve true, mientras que la segunda devuelve false."),(0,n.kt)("h2",{id:"crear-m\xe9todos-en-un-objeto"},"Crear m\xe9todos en un objeto"),(0,n.kt)("p",null,"En los valores de un objeto podemos almacenar cualquier tipo de dato de JS (JavaScript), por ende, tambi\xe9n podr\xedamos almacenar el tipo de dato ",(0,n.kt)("inlineCode",{parentName:"p"},"Function"),", es decir, funciones, esto es un tipo de propiedad especial llamada m\xe9todo. "),(0,n.kt)("p",null,"Ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const perro = {\n   nombre: 'Chispas', \n   raza: 'Labrador', \n   ladrar: () => console.log('Guau guau')\n}\n")),(0,n.kt)("p",null,"Para llamar la funci\xf3n ladrar del objeto perro tenemos que acceder como una propiedad cualquiera y luego agregar par\xe9ntesis as\xed:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// Muestra en consola 'Guau guau'\nperro.ladrar(); \n")),(0,n.kt)("h2",{id:"evitar-la-mutaci\xf3n-de-objetos"},"Evitar la mutaci\xf3n de objetos"),(0,n.kt)("p",null,"Cuando hablamos de mutaci\xf3n de objetos nos referimos a cambiar los valores de las propiedades de un objeto en ciertas partes de nuestro c\xf3digo, normalmente podemos cambiarle el valor de una propiedad las veces que nosotros queramos. Ahora bien, existe una instrucci\xf3n que nos limita esta acci\xf3n para que no podamos cambiar estas propiedades, la instrucci\xf3n es ",(0,n.kt)("inlineCode",{parentName:"p"},"Object.freeze(myObj)"),". "),(0,n.kt)("p",null,"Ejemplo: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const carro = {\n   marca: 'TOYOTA',\n   modelo: '2021',\n   precio: '34.000.000',\n   km: 0\n}\n\nObject.freeze(carro);\n\ncarro.km = 10;\n// Muestra en consola 0\nconsole.log(carro.km); \n")),(0,n.kt)("p",null,'Si ejecutamos el ejemplo anterior nos vamos a dar cuenta que JS "nos deja cambiar el valor", pero al imprimir el valor de la propiedad ',(0,n.kt)("inlineCode",{parentName:"p"},"km")," del objeto carro podemos notar que el valor no se ha cambiado a 10 y sigue en 0. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Nota:")," Si ejecutamos el anterior c\xf3digo en modo estricto (use strict) JS nos lanzar\xe1 un error."),(0,n.kt)("h2",{id:"abreviatura-de-propiedades-de-objetos"},"Abreviatura de propiedades de objetos"),(0,n.kt)("p",null,"ES6 a\xf1ade un buen soporte para definir f\xe1cilmente los literales de los objetos. Si tenemos el siguiente c\xf3digo"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const obtenerPosicionRaton = (x, y) => ({\n  x: x,\n  y: y\n});\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"obtenerPosicionRaton")," es una funci\xf3n simple que devuelve un objeto que contiene dos propiedades. ES6 proporciona el az\xfacar sint\xe1ctico para eliminar la redundancia de tener que escribir ",(0,n.kt)("inlineCode",{parentName:"p"},"x: x"),". Usted puede simplemente escribir ",(0,n.kt)("inlineCode",{parentName:"p"},"x")," una vez. Aqu\xed est\xe1 la misma funci\xf3n de arriba reescrita para utilizar esta nueva sintaxis:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const obtenerPosicionRaton = (x, y) => ({ x, y });\n")),(0,n.kt)("h2",{id:"obtener-todas-las-propiedades-y-valores-de-un-objeto"},"Obtener todas las propiedades y valores de un objeto"),(0,n.kt)("p",null,"Si quisieramos obtener cuales son todas las propiedades de un objeto, JS nos proporciona una funci\xf3n que nos realiza esto, se define as\xed: ",(0,n.kt)("inlineCode",{parentName:"p"},"Object.keys(myObj)"),", esta funci\xf3n nos devuelve un array con los nombres de las propiedades. "),(0,n.kt)("p",null,"Ejemplo: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const producto = {\n   nombre: 'Limpiavidrios 3000',\n   tipo: 'Limpieza',\n   precio: '15.000',\n   bodega: 1\n}\n\nconst propiedades = Object.keys(producto);\n\n//Muestra en consola ['nombre','tipo','precio','bodega']\nconsole.log(propiedades);\n")),(0,n.kt)("p",null,"Tambi\xe9n podemos obtener todos los valores de un objeto, para eso JS nos proporciona la funci\xf3n ",(0,n.kt)("inlineCode",{parentName:"p"},"Object.values(myObj)"),". Esta funci\xf3n nos devuelve un array con los valores de las propiedades del objeto pasado como par\xe1metro."),(0,n.kt)("p",null,"Ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const producto = {\n   nombre: 'Limpiavidrios 3000',\n   tipo: 'Limpieza',\n   precio: '15.000',\n   bodega: 1,\n   proveedor: {\n        nombre: 'LIMPIEZA S.A',\n        direccion: 'CALLE 10, medell\xedn',\n        NIT: 239723793\n   }\n}\n\nconst valores = Object.values(producto);\n\n//Muestra en consola ['Limpiavidrios 3000', 'Limpieza', '15.000', 1, {nombre: 'LIMPIEZA S.A', direccion: 'CALLE 10, medell\xedn', NIT: 239723793 }] \nconsole.log(valores);\n")),(0,n.kt)("h2",{id:"for--in"},"For ... in"),(0,n.kt)("p",null,'Es una alternativa al bucle for para recorridos a propiedades de objetos en JavaScript. Ese recorrido es "gen\xe9rico", es decir, es independiente del n\xfamero de propiedades que se encuentre en el objeto que estamos recorriendo y es independiente tambi\xe9n de sus nombres de propiedad o sus valores.  Su sintaxis es la siguiente:'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'for (let propiedad in objeto){\n    // c\xf3digo a repetir por el bucle.\n    // dentro de este c\xf3digo la variable "propiedad" contiene la propiedad actual\n    // en cada uno de los pasos de la iteraci\xf3n.\n}\n')),(0,n.kt)("p",null,"De esta manera puedes acceder a los nombres de las propiedades del objeto. Gracias al bucle, el c\xf3digo que se incluye dentro del for se ejecutar\xe1 una vez por cada una de las propiedades del objeto."),(0,n.kt)("p",null,"Habr\xe1s notado que hemos dicho que as\xed podr\xe1s acceder a las propiedades, para acceder a sus valores tendr\xe1s que usar algo adicional. Veamos el siguiente ejemplo: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const diasMes: {\n   enero: 31, \n   febrero: 28, \n   marzo: 31, \n   abril: 30, \n   mayo: 31\n}\n\nfor (const mes in diasMes){\n    console.log(mes);\n}\n")),(0,n.kt)("p",null,"Con esto conseguir\xe1s en la consola que aparezcan todos los nombres de los meses del a\xf1o que tenemos en ese objeto diasMes.\nEn caso tal de que no quieras acceder a los nombres de las propiedades sino a sus valores puedes hacerlo as\xed: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"for (const mes in diasMes){\n    console.log(diasMes[mes]);\n}\n")),(0,n.kt)("p",null,"Seg\xfan lo visto anteriormente podemos deducir como se acceder a los nombres de las propiedades y a los valores a la misma vez, sin embargo veamos la forma en la que se hace: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"for (const mes in diasMes){\n    console.log(`${mes}: ${diasMes[mes]}`);\n}\n")),(0,n.kt)("h3",{id:"referencias"},"Referencias"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Para elaborar el cont\xe9nido anterior de objetos se utiliz\xf3 apoyo del curso ",(0,n.kt)("a",{parentName:"li",href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"},"JavaScript Algorithms and Data Structures")," de ",(0,n.kt)("a",{parentName:"li",href:"https://www.freecodecamp.org/learn"},"freeCodeCamp")),(0,n.kt)("li",{parentName:"ul"},"Para elaborar el cont\xe9nido de for ... in se utiliz\xf3 apoyo de este ",(0,n.kt)("a",{parentName:"li",href:"https://desarrolloweb.com/articulos/recorridos-propiedades-objetos-javascript-forin.html"},"enlace"))),(0,n.kt)("h2",{id:"contenido-adicional"},"Contenido adicional"),(0,n.kt)("p",null,"Puedes revisar la siguiente ",(0,n.kt)("a",{parentName:"p",href:"https://es.javascript.info/object"},"lecci\xf3n")," completa de objetos para ver este tema explicado de una forma diferente y con algunas cosas adicionales que te podr\xedan ser de ayuda m\xe1s adelante. "),(0,n.kt)("h1",{id:"objetos-json"},"Objetos JSON"),(0,n.kt)("p",null,"Como lo dice ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/es/"},"MDN Web Docs"),", JSON es un formato de datos basado en texto que sigue la sintaxis de objeto de JavaScript. Aunque es muy parecido a la sintaxis de objeto literal de JavaScript, puede ser utilizado independientemente de JavaScript, y muchos entornos de programaci\xf3n poseen la capacidad de leer (convertir; parsear) y generar JSON, JavaScript no es JSON, y algo JSON no es JavaScript. Los JSON son cadenas \xfatiles cuando se quiere transmitir datos a trav\xe9s de una red. Debe ser convertido a un objeto nativo de JavaScript cuando se requiera acceder a sus datos. \xc9sto no es un problema, dado que JavaScript posee un objeto global JSON que tiene los m\xe9todos disponibles para convertir entre ellos.\nEjemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n   "Nombre": "Carla",\n   "Apellido": "G\xf3mez",\n   "Edad": 29\n}\n')),(0,n.kt)("p",null,"Documentaci\xf3n t\xe9cnica: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/es/docs/Learn/JavaScript/Objects/JSON"},"https://developer.mozilla.org/es/docs/Learn/JavaScript/Objects/JSON"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/JSON"},"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/JSON")),(0,n.kt)("h2",{parentName:"li",id:"localstorage-y-sessionstorage"},"LocalStorage y SessionStorage"))),(0,n.kt)("p",null,"LocalStorage y SessionStorage son propiedades que acceden al objeto ",(0,n.kt)("inlineCode",{parentName:"p"},"Storage")," y tienen la funci\xf3n de almacenar datos de manera local. En pocas palabras son lugares donde podemos guardar informaci\xf3n. El almacenamiento funciona parecido a un objeto ya que la estructura es clave-valor. "),(0,n.kt)("h3",{id:"diferencias"},"Diferencias"),(0,n.kt)("p",null,"El localStorage se caracteriza por que los datos almacenados no tienen fecha de expiraci\xf3n o hasta que se decida limpiar los datos del navegador, en cambio sessionStorage almacena informaci\xf3n mientras la pesta\xf1a donde se est\xe9 utilizando siga abierta, una vez cerrada, la informaci\xf3n se elimina. Para manejar estas funcionalidades desde JS podemos utilizar las siguientes funciones "),(0,n.kt)("h4",{id:"a\xf1adir-item-o-propiedad"},"A\xf1adir item o propiedad"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"//LocalStorage\nlocalStorage.setItem('propiedad', 'valor');\n\n//SessionStorage\nsessionStorage.setItem('propiedad', 'valor');\n")),(0,n.kt)("h4",{id:"obtener-el-valor-de-un-item-o-propiedad"},"Obtener el valor de un item o propiedad"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"//LocalStorage\nlet valorLocal = localStorage.getItem('propiedad');\n\n//SessionStorage\nlet valorSession = sessionStorage.getItem('propiedad');\n")),(0,n.kt)("h4",{id:"eliminar-item-o-propiedad"},"Eliminar item o propiedad"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"//LocalStorage\nlocalStorage.removeItem('propiedad');\n\n//SessionStorage\nsessionStorage.removeItem('propiedad');\n")),(0,n.kt)("h4",{id:"eliminar-todos-los-\xedtems-o-propiedades-almacenados"},"Eliminar todos los \xedtems o propiedades almacenados."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"//LocalStorage\nlocalStorage.clear();\n\n//SessionStorage\nsessionStorage.clear();\n")))}c.isMDXComponent=!0}}]);