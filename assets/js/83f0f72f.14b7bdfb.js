"use strict";(self.webpackChunkexplorer_course=self.webpackChunkexplorer_course||[]).push([[1474],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>m});var r=n(7294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,l=function(e,a){if(null==e)return{};var n,r,l={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),s=function(e){var a=r.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},u=function(e){var a=s(e.components);return r.createElement(c.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var n=e.components,l=e.mdxType,t=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=l,b=d["".concat(c,".").concat(m)]||d[m]||p[m]||t;return n?r.createElement(b,o(o({ref:a},u),{},{components:n})):r.createElement(b,o({ref:a},u))}));function m(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var t=n.length,o=new Array(t);o[0]=d;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<t;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},259:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>s});var r=n(7462),l=(n(7294),n(3905));const t={sidebar_position:4},o="Estructuras Ciclicas",i={unversionedId:"tutorial-js/estructuras-ciclicas",id:"tutorial-js/estructuras-ciclicas",title:"Estructuras Ciclicas",description:"\xbfQue son las Estructuras Ciclicas?",source:"@site/docs/tutorial-js/estructuras-ciclicas.md",sourceDirName:"tutorial-js",slug:"/tutorial-js/estructuras-ciclicas",permalink:"/explorer-course-ai/docs/tutorial-js/estructuras-ciclicas",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Estructuras Condicionales",permalink:"/explorer-course-ai/docs/tutorial-js/estructuras-condicionales"},next:{title:"DOM (Document Object Model)",permalink:"/explorer-course-ai/docs/tutorial-js/dom"}},c={},s=[{value:"Bucle for",id:"bucle-for",level:3},{value:"Bucle while",id:"bucle-while",level:3},{value:"Bucle do while",id:"bucle-do-while",level:3}],u={toc:s};function p(e){let{components:a,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"estructuras-ciclicas"},"Estructuras Ciclicas"),(0,l.kt)("p",null,"\xbfQue son las ",(0,l.kt)("strong",{parentName:"p"},"Estructuras Ciclicas"),"?"),(0,l.kt)("iframe",{width:"80%",height:"315",src:"https://www.youtube.com/embed/VZKZQnaL_NY",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,l.kt)("p",null,"Sirven para ejecutar un mismo c\xf3digo un n\xfamero determinado de veces. Por ejemplo, si nos pidier\xe1n imprimir los n\xfameros del 1 al 10 con lo que sabemos hasta el momento lo har\xedamos as\xed:"),(0,l.kt)("p",null,"Pseudoc\xf3digo (PSeInt)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Escribir 1\nEscribir 2\nEscribir 3\nEscribir 4\nEscribir 5\nEscribir 6\nEscribir 7\nEscribir 8\nEscribir 9\nEscribir 10\n")),(0,l.kt)("p",null,"Javascript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(1)\nconsole.log(2)\nconsole.log(3)\nconsole.log(4)\nconsole.log(5)\nconsole.log(6)\nconsole.log(7)\nconsole.log(8)\nconsole.log(9)\nconsole.log(10)\n")),(0,l.kt)("p",null,"Pero con los ciclos podemos resumir esto en dos l\xedneas utilizando un tipo de ciclo como ",(0,l.kt)("strong",{parentName:"p"},"for")," as\xed:"),(0,l.kt)("p",null,"Pseudoc\xf3digo (PSeInt)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Para i<-0 Hasta 10 Con Paso 1 Hacer\n    Escribir i\nFin Para        \n")),(0,l.kt)("p",null,"Javascript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i = 1; i <= 10; i++) {\n        console.log(i)\n}\n")),(0,l.kt)("h3",{id:"bucle-for"},"Bucle for"),(0,l.kt)("p",null,"Tiene la siguiente estructura:\npodemos identificarlo por usar al comienzo la palabra ",(0,l.kt)("inlineCode",{parentName:"p"},"for"),"\ndespu\xe9s ir\xe1 la configuraci\xf3n del bucle entre par\xe9ntesis ",(0,l.kt)("inlineCode",{parentName:"p"},"()")," que tiene 3 partes, separadas por punto y coma ",(0,l.kt)("inlineCode",{parentName:"p"},";"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inicializaci\xf3n: Para utilizar el ciclo for necesitaremos m\xednimo una variable que nos ayudar\xe1 para validar la condici\xf3n, para esto realizaremos la declaraci\xf3n y asignaci\xf3n con el valor inicial de la variable (ej: let i = 1). Esta variable cambiar\xe1 seg\xfan se defina lo cual nos ayuda a controlar el ciclo. "),(0,l.kt)("li",{parentName:"ul"},"Condici\xf3n: En esta parte ubicaremos la condici\xf3n que debe cumplirse para que se ejecute el bloque de c\xf3digo (ej: i < 20), en caso de que esta condici\xf3n no se cumpla el ciclo se detiene. "),(0,l.kt)("li",{parentName:"ul"},"Actualizaci\xf3n: En esta parte se define el cambio de la variable que previamente se declaro en la primera parte del ciclo, esta operaci\xf3n se realizar\xe1 al final de cada iteraci\xf3n del bucle (ej: i++, que es la abreviaci\xf3n de i = i + 1)")),(0,l.kt)("p",null,"Al final definimos un bloque de c\xf3digo entre llaves ",(0,l.kt)("inlineCode",{parentName:"p"},"{}")," que se va a ejecutar si se cumple la condici\xf3n"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i = 0; i < 20; i++) {\n    console.log('Me encantan los bucles');\n}\n")),(0,l.kt)("p",null,"En este ejemplo de c\xf3digo, hacemos aparecer 20 veces en la consola el texto ",(0,l.kt)("strong",{parentName:"p"},"Me encantan los bucles"),". Funciona de la siguiente forma:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Se ejecuta el c\xf3digo de inicializaci\xf3n (let i = 0)"),(0,l.kt)("li",{parentName:"ol"},"Se comprueba que la condici\xf3n se cumple (i < 20), si se cumple vamos al paso 3 y si no se cumple vamos al paso 6"),(0,l.kt)("li",{parentName:"ol"},"Como la condici\xf3n se cumple, se ejecuta el c\xf3digo que hay dentro del bloque entre las llaves ({}), es decir el console.log"),(0,l.kt)("li",{parentName:"ol"},"Se ejecuta la actualizaci\xf3n del bucle (i++) y la variable i pasa a valer 1"),(0,l.kt)("li",{parentName:"ol"},"Vuelta al paso 2"),(0,l.kt)("li",{parentName:"ol"},"Cuando la variable i llega al valor de 20, la condici\xf3n ya no se cumple (20 no es menor que 20), por lo tanto el bloque que contiene el console log no se ejecuta y el bucle acaba")),(0,l.kt)("p",null,"Otro aspecto interesante de los bucles for es que dentro del bloque de c\xf3digo que se repite (el que va entre llaves {}) podemos usar la variable i, por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i = 0; i < 20; i++) {\n    console.log('Voy por la vuelta ' + i);\n}  \n")),(0,l.kt)("p",null,"Este ejemplo har\xe1 aparecer 20 veces, en la consola, el texto:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Voy por la vuelta 0\nVoy por la vuelta 1\nVoy por la vuelta 2\n...\nVoy por la vuelta 19\n")),(0,l.kt)("h3",{id:"bucle-while"},"Bucle while"),(0,l.kt)("p",null,'Es una estructura que repetir\xe1 un proceso durante "N" veces, donde "N" puede ser fijo o variable. Para esto, la instrucci\xf3n se vale de una condici\xf3n que es la que debe cumplirse para que se siga ejecutando. Cuando la condici\xf3n no se cumple, entonces no se ejecuta el proceso. La forma de esta estructura es la siguiente:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"while ( condicion ) {\n    //Acci\xf3n 1\n    //Acci\xf3n 2\n    .\n    .\n    //Acci\xf3n N\n}\n")),(0,l.kt)("h3",{id:"bucle-do-while"},"Bucle do while"),(0,l.kt)("p",null,"Esta es una estructura similar en algunas caracter\xedsticas al while, repite un proceso una cantidad de veces, pero a diferencia del while, esta estructura permite realizar ",(0,l.kt)("strong",{parentName:"p"},"m\xednimo una vez")," el proceso que est\xe9 entre ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"),", ya que la condici\xf3n se eval\xfaa al final del proceso, mientras que en el while puede ser que nunca llegue a ejecutar el proceso que est\xe9 entre ",(0,l.kt)("inlineCode",{parentName:"p"},"{}")," si la condici\xf3n no se cumple desde un principio. La forma de la estructura es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"do {\n    //Acci\xf3n 1\n    //Acci\xf3n 2\n    .\n    .\n    //Acci\xf3n N\n} while ( condicion )\n")))}p.isMDXComponent=!0}}]);