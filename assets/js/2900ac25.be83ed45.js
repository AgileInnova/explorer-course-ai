"use strict";(self.webpackChunkexplorer_course=self.webpackChunkexplorer_course||[]).push([[5417],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>d});var o=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,o,r=function(e,a){if(null==e)return{};var n,o,r={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var a=o.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=c(e.components);return o.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,g=m["".concat(s,".").concat(d)]||m[d]||p[d]||t;return n?o.createElement(g,l(l({ref:a},u),{},{components:n})):o.createElement(g,l({ref:a},u))}));function d(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,l=new Array(t);l[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<t;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4343:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const t={sidebar_position:7},l="Funciones",i={unversionedId:"tutorial-js/funciones",id:"tutorial-js/funciones",title:"Funciones",description:"Tareas",source:"@site/docs/tutorial-js/funciones.md",sourceDirName:"tutorial-js",slug:"/tutorial-js/funciones",permalink:"/explorer-course-ai/docs/tutorial-js/funciones",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Eventos",permalink:"/explorer-course-ai/docs/tutorial-js/eventos"},next:{title:"Arreglos",permalink:"/explorer-course-ai/docs/tutorial-js/arreglos"}},s={},c=[{value:"ECMAScript o ES",id:"ecmascript-o-es",level:2},{value:"Tipos de funciones",id:"tipos-de-funciones",level:2},{value:"Funci\xf3n sin par\xe1metros",id:"funci\xf3n-sin-par\xe1metros",level:3},{value:"Funci\xf3n con par\xe1metros",id:"funci\xf3n-con-par\xe1metros",level:3},{value:"Funci\xf3n sin retorno",id:"funci\xf3n-sin-retorno",level:3},{value:"Funci\xf3n An\xf3nima",id:"funci\xf3n-an\xf3nima",level:3},{value:"Asignar la funci\xf3n a una variable",id:"asignar-la-funci\xf3n-a-una-variable",level:3},{value:"Scope",id:"scope",level:2},{value:"Global",id:"global",level:3},{value:"Local",id:"local",level:3},{value:"Global vs Local",id:"global-vs-local",level:3}],u={toc:c};function p(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"funciones"},"Funciones"),(0,r.kt)("div",{style:{position:"relative"}},(0,r.kt)("div",{className:"card-demo cardDemo"},(0,r.kt)("div",{className:"card",style:{backgroundColor:"#242526"}},(0,r.kt)("div",{className:"card__header"},(0,r.kt)("h3",{style:{color:"#FFF",textAlign:"center"}},"Tareas")),(0,r.kt)("div",{className:"card__body"},(0,r.kt)("a",{href:"https://github.com/Agile-Innova-Academy/explorer-course/tree/main/2.%20Javascript/07-Funciones/Tarea-01",target:"_blank"},(0,r.kt)("button",{className:"button button--primary button--block",style:{marginBottom:"10px"}},"Tarea 1")),(0,r.kt)("a",{href:"https://github.com/Agile-Innova-Academy/explorer-course/tree/main/2.%20Javascript/07-Funciones/Tarea-02",target:"_blank"},(0,r.kt)("button",{className:"button button--primary button--block",style:{marginBottom:"10px"}},"Tarea 2")),(0,r.kt)("a",{href:"https://github.com/Agile-Innova-Academy/explorer-course/tree/main/2.%20Javascript/07-Funciones/Tarea-03",target:"_blank"},(0,r.kt)("button",{className:"button button--primary button--block",style:{marginBottom:"10px"}},"Tarea 3")))))),(0,r.kt)("p",null,"Fundamentos sobre las ",(0,r.kt)("strong",{parentName:"p"},"Funciones")),(0,r.kt)("iframe",{width:"80%",height:"315",src:"https://www.youtube.com/embed/wvsEJXzqHNI",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,r.kt)("iframe",{width:"80%",height:"315",src:"https://www.youtube.com/embed/pPOvNnWeshQ",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,r.kt)("p",null,"Una funci\xf3n es un bloque de c\xf3digo que definimos una vez y lo reutilizamos las veces que queramos; un conjunto de instrucciones a las que podemos pasar diferentes datos, luego estos datos se procesan y as\xed la funci\xf3n nos devolver\xe1 resultados distintos seg\xfan sea el resultado del procesamiento."),(0,r.kt)("p",null,"Las funciones son muy \xfatiles a la hora de crear un c\xf3digo \xfanico para usarlo en distintas partes de nuestro programa. El beneficio de esto es que si en el futuro queremos modificar algo de ese c\xf3digo lo haremos en un \xfanico sitio aunque se utilice en decenas de sitios diferentes. Las funciones se ejecutan en distintos momentos y con distintas caracter\xedsticas gracias a los par\xe1metros."),(0,r.kt)("p",null,"Otra de las ventajas de las funciones es que devuelven un valor, es decir, realizan una operaci\xf3n y pueden devolver un dato. Ese dato podemos asign\xe1rselo a una variable o usarlo dentro de otra operaci\xf3n. O incluso podemos prescindir de \xe9l si no nos interesa para nada."),(0,r.kt)("p",null,"Aqu\xed hay un ejemplo de una funci\xf3n:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'nombreFuncion() {\n  console.log("Hola Mundo");\n}\n')),(0,r.kt)("p",null,"Puedes llamar o invocar esta funci\xf3n usando su nombre seguido de par\xe9ntesis, as\xed: ",(0,r.kt)("inlineCode",{parentName:"p"},"nombreFuncion()"),", cada vez que se llame a la funci\xf3n se imprimir\xe1 el mensaje ",(0,r.kt)("inlineCode",{parentName:"p"},"Hola Mundo")," en la consola. Todo el c\xf3digo entre las llaves se ejecutar\xe1 cada vez que se llame a la funci\xf3n."),(0,r.kt)("h2",{id:"ecmascript-o-es"},"ECMAScript o ES"),(0,r.kt)("p",null,"Antes de continuar con la explicaci\xf3n de las funciones queremos que sepas que es ECMAScript o ES, esto es una versi\xf3n estandarizada de JavaScript. Dado que todos los principales navegadores siguen esta especificaci\xf3n, los t\xe9rminos ECMAScript y JavaScript son intercambiables. Al momento de escribir esta gu\xeda la \xfaltima versi\xf3n de ECMAScript es la 12, o sea ES12, JavaScript est\xe1 en constante evoluci\xf3n, y \xfaltimamente cada a\xf1o se lanzan nuevas caracter\xedsticas."),(0,r.kt)("p",null,"ES6, lanzado en 2015, a\xf1adi\xf3 muchas caracter\xedsticas nuevas y potentes al lenguaje. Al rededor de est\xe1s gu\xedas vemos implementaciones de varias versiones de ECMAScript, como lo es el caso de esta gu\xeda, donde por ejemplo se explican las funciones an\xf3nimas (ES5) y se da la otra alternativa que son las funciones flecha (ES6). Si quieres m\xe1s adelante ver otro tipo de caso como el mencionado anteriormente puedes visitar art\xedculos como ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@jagogutierrez/ecmascript-es6-diferencias-notables-al-es5-83d3e33ae201"},"este"),". "),(0,r.kt)("h2",{id:"tipos-de-funciones"},"Tipos de funciones"),(0,r.kt)("h3",{id:"funci\xf3n-sin-par\xe1metros"},"Funci\xf3n sin par\xe1metros"),(0,r.kt)("p",null,"Son funciones que no tienen par\xe1metros, normalmente se realizan cuando no se necesitan argumentos para la que la funci\xf3n se realice o se utilizan\nvalores externos a la funci\xf3n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  function nombreFuncion() {\n     //Accion\n  }\n")),(0,r.kt)("h3",{id:"funci\xf3n-con-par\xe1metros"},"Funci\xf3n con par\xe1metros"),(0,r.kt)("p",null,'Los par\xe1metros son variables que se introducen en una funci\xf3n cuando se llama. Cuando se define una funci\xf3n, normalmente se define junto con uno o m\xe1s par\xe1metros. Los valores reales que se introducen (o se "pasan") a una funci\xf3n cuando se la llama se conocen como argumentos. Cuando a una funci\xf3n le debemos enviar varios argumentos debemos de tener cuenta el orden de estos, ya que si los pasamos en diferente orden a como est\xe1n definidos los parametros de la funci\xf3n posiblemente no tendremos el resultado esperado. '),(0,r.kt)("p",null,"Esta es una funci\xf3n con dos par\xe1metros, parametro1 y parametro2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  function funcionPrueba(parametro1, parametro2) {\n     console.log(parametro1, parametro2);\n  }\n")),(0,r.kt)("p",null,"Entonces podemos llamar a ",(0,r.kt)("strong",{parentName:"p"},"funcionPrueba")," as\xed: ",(0,r.kt)("inlineCode",{parentName:"p"},'funcionPrueba("Hola", "Mundo")'),". Hemos pasado dos argumentos de cadena, ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Hola"))," y ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Mundo")),". Dentro de la funci\xf3n, param1 ser\xe1 igual a la cadena Hola y param2 ser\xe1 igual a la cadena Mundo. Ten en cuenta que podr\xedas volver a llamar a funcionPrueba con argumentos diferentes y los par\xe1metros tomar\xedan el valor de los nuevos argumentos."),(0,r.kt)("h3",{id:"funci\xf3n-sin-retorno"},"Funci\xf3n sin retorno"),(0,r.kt)("p",null,"Tambi\xe9n llamadas procedimiento, son funciones que no retorna un valor, en muchos lenguajes de programaci\xf3n las podemos reconocer cuando no contiene la palabra ",(0,r.kt)("inlineCode",{parentName:"p"},"return"),". "),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"https://storage.googleapis.com/academia-geek-general-bucket/modulo-2/modulo_2_img_2.png",alt:"",width:"450",height:"180"})),"### Funci\xf3n con retorno Funci\xf3n que al llamarla me retorna o devuelve un valor, que luego puedo almacenarlo en una variable o constante, la podemos reconocer cuando contiene la palabra `return`, es ***muy importante*** que sepas que el return lo utilizamos para enviar un valor de vuelta de una funci\xf3n. Si llegamos a retornar un valor ya el resto del c\xf3digo no se ejecutar\xe1.",(0,r.kt)("p",{align:"center"}," ",(0,r.kt)("img",{src:"https://storage.googleapis.com/academia-geek-general-bucket/modulo-2/modulo_2_img_3.png",alt:"",width:"450",height:"180"})," "),(0,r.kt)("p",null,"En el ejemplo anterior, llamamos la funci\xf3n dentro del console.log as\xed: ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log(calcularPromedio(35,10,9))"),", esto quiere decir que se va a imprimir un mensaje en la consola con lo que ",(0,r.kt)("strong",{parentName:"p"},"retorne")," la funci\xf3n, en este caso retornar\xe1 la cadena de caracteres 'El promedio es: 18', ya que (35+10+9)/3 es igual a 18 y luego se concatena con el string 'El promedio es: '. Si pusieramos ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log(num1,num2,num3)")," debajo del return y antes de la llave de cierre de la funci\xf3n, este no se mostrar\xeda ya que en la anterior instrucci\xf3n estamos retornando un valor utilizando ",(0,r.kt)("strong",{parentName:"p"},"return")," y ya estar\xedamos afuera de la funci\xf3n, es decir, la ejecuci\xf3n de la funci\xf3n actual se detiene y el control vuelve a la ubicaci\xf3n de llamada."),(0,r.kt)("h3",{id:"funci\xf3n-an\xf3nima"},"Funci\xf3n An\xf3nima"),(0,r.kt)("p",null,"Cuando una funci\xf3n se define sin un nombre, la podemos utilizar cuando no necesitamos llamar a la funcion en otra parte. "),(0,r.kt)("p",{align:"center"}," ",(0,r.kt)("img",{src:"https://storage.googleapis.com/academia-geek-general-bucket/modulo-2/modulo_2_img_5.png",alt:"",width:"500",height:"150"})," "),"### Funci\xf3n flecha o arrow functions Es una funci\xf3n an\xf3nima y la podemos reconocer porque no tiene la palabra reservada `function`, y normalmente antes de las llaves tenemos los simbolos `=>`. Este tipo de funci\xf3n es muy utilizada ya que podemos resumir bastante nuestro c\xf3digo, por ejemplo, podemos realizar funciones flecha con las siguientes estructuras:",(0,r.kt)("p",null," Forma com\xfan"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"}," const nombreFuncion = (param1,param2,paramN) => {\n     //Acci\xf3n\n     //Acci\xf3n\n }\n")),(0,r.kt)("p",null," Si s\xf3lo necesitamos un par\xe1metro en nuestra funci\xf3n podemos quitar los par\xe9ntesis"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  const nombreFuncion = parametro => {\n     //Accion1\n     //Accion2\n  }\n")),(0,r.kt)("p",null,"Si el contenido de la funci\xf3n ocupa solo una l\xednea de c\xf3digo no necesitamos poner ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," y no tiene que estar entre llaves"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  const nombreFuncion = (param1,param2) => param1+param2\n")),(0,r.kt)("p",null,"Tambi\xe9n podemos combinar las dos anteriores as\xed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  const nombreFuncion = param1 => param1 * 2\n")),(0,r.kt)("p",null,"Si quisieramos realizar una funci\xf3n flecha sin par\xe1metos"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  const nombreFuncion = () => console.log('Hola mundo')\n")),(0,r.kt)("p",null,"Reforcemos con un ejemplo de funci\xf3n flecha lo m\xe1s simplificado posible:"),(0,r.kt)("p",{align:"center"}," ",(0,r.kt)("img",{src:"https://raw.githubusercontent.com/LeisyVasquez/EcoCol/main/Funcion%20flecha.PNG"})," "),(0,r.kt)("h3",{id:"asignar-la-funci\xf3n-a-una-variable"},"Asignar la funci\xf3n a una variable"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/LeisyVasquez/EcoCol/main/Asignar%20funcion.PNG"})),(0,r.kt)("p",null,"En el ejemplo anterior se puede evidenciar que la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"calcularPromedio")," la estamos guardando en la constante ",(0,r.kt)("inlineCode",{parentName:"p"},"calcular"),", luego al llamar la funci\xf3n lo podemos hacer utilizando ",(0,r.kt)("inlineCode",{parentName:"p"},"calcular")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"calcularPromedio")," ya que son una copia exacta y har\xedan lo mismo."),(0,r.kt)("h2",{id:"scope"},"Scope"),(0,r.kt)("p",null,"En JavaScript, el ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"scope"))," se refiere a la visibilidad de las variables. "),(0,r.kt)("h3",{id:"global"},"Global"),(0,r.kt)("p",null,"Las variables que se definen fuera de un bloque de funciones tienen alcance global. Esto significa que pueden verse en cualquier parte del c\xf3digo JavaScript. En la siguiente imagen hay una variable con alcance global llamada ",(0,r.kt)("inlineCode",{parentName:"p"},"miVariableGlobal"),", se puede acceder a ella desde cualquier parte del c\xf3digo, ya sea dentro de funciones o fuera de ellas "),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/LeisyVasquez/EcoCol/main/Alcance%20Global.PNG"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Tip:")," Cuando en el ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," solo se debe de ejecutar una acci\xf3n no es necesario poner las llaves, si es m\xe1s de una si es obligatorio ponerlas. "),(0,r.kt)("h3",{id:"local"},"Local"),(0,r.kt)("p",null,"Las variables que se declaran dentro de una funci\xf3n, as\xed como los par\xe1metros de la funci\xf3n, tienen \xe1mbito local.  En la siguiente imagen dentro de la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"obtenerVariableLocal")," hay una variable con alcance local llamada ",(0,r.kt)("inlineCode",{parentName:"p"},"miVariableLocal"),", a esta variable no se puede acceder por fuera de la funci\xf3n. "),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/LeisyVasquez/EcoCol/main/Alcance%20Local.PNG"})),(0,r.kt)("p",null,"La llamada a la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"obtenerMiVariableLocal")," mostrar\xe1 la cadena ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"'Solo pueden acceder a mi dentro de la funci\xf3n obtenerMiVariableLocal'"))," en la consola. Las l\xedneas\n",(0,r.kt)("inlineCode",{parentName:"p"},'miVariableLocal = "Hola, intento cambiarle el valor a la variable local"')," y ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log(miVariableGlobal)")," (fuera de la funci\xf3n obtenerMiVariableLocal) arrojaran un error, ya que miVariableLocal no est\xe1 definida fuera de la funci\xf3n."),(0,r.kt)("h3",{id:"global-vs-local"},"Global vs Local"),(0,r.kt)("p",null,"Es posible tener variables locales y globales con el mismo nombre. Cuando se hace esto, la variable local tiene prioridad sobre la variable global."),(0,r.kt)("p",null,"Para elaborar el cont\xe9nido anterior de funciones se utiliz\xf3 apoyo del curso ",(0,r.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"},"JavaScript Algorithms and Data Structures")," de ",(0,r.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/learn"},"freeCodeCamp")))}p.isMDXComponent=!0}}]);