"use strict";(self.webpackChunkexplorer_course=self.webpackChunkexplorer_course||[]).push([[5989],{3905:(e,a,r)=>{r.d(a,{Zo:()=>p,kt:()=>u});var t=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function i(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=t.createContext({}),d=function(e){var a=t.useContext(s),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},p=function(e){var a=d(e.components);return t.createElement(s.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(r),u=n,g=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return r?t.createElement(g,l(l({ref:a},p),{},{components:r})):t.createElement(g,l({ref:a},p))}));function u(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var d=2;d<o;d++)l[d]=r[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6991:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var t=r(7462),n=(r(7294),r(3905));const o={sidebar_position:8},l="Grid",i={unversionedId:"tutorial-html/grid",id:"tutorial-html/grid",title:"Grid",description:"Tareas",source:"@site/docs/tutorial-html/grid.md",sourceDirName:"tutorial-html",slug:"/tutorial-html/grid",permalink:"/explorer-course-ai/docs/tutorial-html/grid",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Animaciones en CSS",permalink:"/explorer-course-ai/docs/tutorial-html/animaciones"},next:{title:"Dise\xf1o Responsive",permalink:"/explorer-course-ai/docs/tutorial-html/dise\xf1o-responsive"}},s={},d=[{value:"Sistema de Grid",id:"sistema-de-grid",level:2},{value:"CSS grid",id:"css-grid",level:2},{value:"Recursos externos",id:"recursos-externos",level:2}],p={toc:d};function c(e){let{components:a,...r}=e;return(0,n.kt)("wrapper",(0,t.Z)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"grid"},"Grid"),(0,n.kt)("div",{className:"card-demo cardDemo"},(0,n.kt)("div",{className:"card",style:{backgroundColor:"#242526"}},(0,n.kt)("div",{className:"card__header"},(0,n.kt)("h3",{style:{color:"#FFF",textAlign:"center"}},"Tareas")),(0,n.kt)("div",{className:"card__body"},(0,n.kt)("a",{href:"https://github.com/Agile-Innova-Academy/explorer-course/tree/main/3.%20HTML%20y%20CSS/09-Grid/Tarea-1",target:"_blank"},(0,n.kt)("button",{className:"button button--primary button--block",style:{marginBottom:"10px"}},"Tarea 1")),(0,n.kt)("a",{href:"https://github.com/Agile-Innova-Academy/explorer-course/tree/main/3.%20HTML%20y%20CSS/09-Grid/Tarea-2",target:"_blank"},(0,n.kt)("button",{className:"button button--primary button--block",style:{marginBottom:"10px"}},"Tarea 2")),(0,n.kt)("a",{href:"https://github.com/Agile-Innova-Academy/explorer-course/tree/main/3.%20HTML%20y%20CSS/09-Grid/Tarea-3",target:"_blank"},(0,n.kt)("button",{className:"button button--primary button--block",style:{marginBottom:"10px"}},"Tarea 3"))))),(0,n.kt)("iframe",{className:"videos",src:"https://www.youtube.com/embed/dI4cd8HMrLM",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,n.kt)("h2",{id:"sistema-de-grid"},"Sistema de Grid"),(0,n.kt)("p",null,"Un sistema de grid o rejilla, nos permite disponer los elementos de una p\xe1gina y que est\xe9n alineados. Va a existir una rejilla imaginaria de filas y columnas, a partir de la cual vamos a colocar los elementos de nuestra web. El uso de un sistema de grid tiene sentido si acompa\xf1a un dise\xf1o que usa tambi\xe9n una rejilla."),(0,n.kt)("h2",{id:"css-grid"},"CSS grid"),(0,n.kt)("p",null,"CSS grid es una nueva caracter\xedstica de CSS que permite tener un sistema de grid de forma nativa en CSS. Es una herramienta compleja, as\xed que vamos a ver las bases de c\xf3mo poder usarla.\nEn primer lugar, existen 2 tipos de elementos, el contenedor del grid y los elementos del grid. En este sentido, es similar a algo que ya conocemos: flexbox.\nPara comenzar, usaremos en el contenedor la propiedad ",(0,n.kt)("inlineCode",{parentName:"p"},"display:grid")," y definiremos las filas y columnas de nuestro grid con ",(0,n.kt)("inlineCode",{parentName:"p"},"grid-template"),"."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://storage.googleapis.com/academia-geek-general-bucket/modulo-1/modulo_1_img_42.png",alt:null})),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Contenedor"))," El elemento padre contenedor que definir\xe1 la cuadr\xedcula o rejilla."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"\xcdtem"))," Cada uno de los hijos que contiene la cuadr\xedcula (elemento contenedor)."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Celda"))," (grid cell): Cada uno de los cuadritos (unidad m\xednima) de la cuadr\xedcula."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Area"))," (grid area): Regi\xf3n o conjunto de celdas de la cuadr\xedcula."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Banda"))," (grid track): Banda horizontal o vertical de celdas de la cuadr\xedcula."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"L\xednea"))," (grid line): Separador horizontal o vertical de las celdas de la cuadr\xedcula."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-html"},'<div class="wrapper">\n  <div class="item item1">1</div>\n  <div class="item item2">2</div>\n  <div class="item item3">3</div>\n  <div class="item item4">4</div>\n  <div class="item item5">5</div>\n  <div class="item item6">6</div>\n</div>\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-css"},".wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: 40px 200px 40px;\n}\n.item {\n  background: deeppink;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n")),(0,n.kt)("p",null,"Ver el ejercicio en ",(0,n.kt)("a",{parentName:"p",href:"https://codepen.io/adalab/pen/JMXwbL?editors=1100"},"codepen")),(0,n.kt)("p",null,"En este grid vamos a tener 4 columnas, cada una de tama\xf1o ",(0,n.kt)("inlineCode",{parentName:"p"},"1fr"),", que es una medida sobre el espacio disponible (free space). Por tanto, se divide el espacio disponible en 4 partes para las columnas. Para las filas, tendremos 3 de 40, 200 y 40px respectivamente.\nA continuaci\xf3n, indicaremos a los elementos si queremos que ocupen una o varias filas o columnas con las propiedades ",(0,n.kt)("inlineCode",{parentName:"p"},"grid-column")," y ",(0,n.kt)("inlineCode",{parentName:"p"},"grid-row"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-css"},".item1 {\n  grid-column-start: 1;\n  grid-column-end: 4;\n}\n")),(0,n.kt)("p",null,"Esto indica que se expande desde la primera l\xednea de grid hasta la cuarta, es decir, ocupa las 3 primeras columnas."),(0,n.kt)("p",null,"Podemos escribir lo anterior de una forma simplificada:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-css"},".item1 {\n  grid-column: 1 / 4;\n}\n")),(0,n.kt)("p",null,"Para las filas funciona exactamente igual:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-css"},".item3 {\n  grid-row-start: 2;\n  grid-row-end: 4;\n}\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://codepen.io/adalab/pen/YLEYxg?editors=1100"},"\u25b8 Ejemplo en codepen")," de",(0,n.kt)("inlineCode",{parentName:"p"}," grid-auto-rows")),(0,n.kt)("p",null,"Y lo podemos usar junto con",(0,n.kt)("inlineCode",{parentName:"p"}," grid-auto-flow"),", que fuerza una \xfanica direcci\xf3n (columna o fila) para nuestra rejilla :)"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://codepen.io/adalab/pen/zjPpma"},"\u25b8 Ejemplo en Codepen")," de ",(0,n.kt)("inlineCode",{parentName:"p"},"grid-auto-columns")," con ",(0,n.kt)("inlineCode",{parentName:"p"},"grid-auto-flow")),(0,n.kt)("p",null,"Con estas propiedades ya podemos empezar a controlar un poco el comportamiento de nuestra rellija. Para completar un poco esta introducci\xf3n a grid faltar\xeda ver la posibilidad de definir \xe1reas con nombres m\xe1s cercanos al humano:"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://storage.googleapis.com/academia-geek-general-bucket/modulo-1/modulo_1_img_43.png",alt:null})),(0,n.kt)("p",null,"El grid que hay debajo es de 2x3, y para definirlo usar\xedamos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-css"},".container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n}\n")),(0,n.kt)("p",null,'pero si queremos "nombrar los espacios" podemos usar, adem\xe1s, grid-template-areas:'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-css"},'.container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n  grid-template-areas: "header header" "main aside" "footer footer";\n}\n')),(0,n.kt)("p",null,"De esta manera creamos un \xe1rea completa asignando a dos el mismo nombre, como el header o el footer."),(0,n.kt)("p",null,"Si ahora quisi\xe9semos que un elemento en concreto se colocase en una de estas \xe1reas, solo tendr\xedamos que dec\xedrselo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-css"},".item--1 {\n  grid-area: main;\n}\n")),(0,n.kt)("h2",{id:"recursos-externos"},"Recursos externos"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://vimeo.com/98141102"},"Frontazo - pensando en grid"),"\n",(0,n.kt)("a",{parentName:"p",href:"https://learncssgrid.com/"},"Learn CSS grid")))}c.isMDXComponent=!0}}]);