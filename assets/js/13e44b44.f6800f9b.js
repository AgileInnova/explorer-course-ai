"use strict";(self.webpackChunkexplorer_course=self.webpackChunkexplorer_course||[]).push([[3984],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>c});var o=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,o,t=function(e,a){if(null==e)return{};var n,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=o.createContext({}),p=function(e){var a=o.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=p(e.components);return o.createElement(i.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},u=o.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=t,k=u["".concat(i,".").concat(c)]||u[c]||m[c]||r;return n?o.createElement(k,s(s({ref:a},d),{},{components:n})):o.createElement(k,s({ref:a},d))}));function c(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,s=new Array(r);s[0]=u;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:t,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7180:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(7462),t=(n(7294),n(3905));const r={sidebar_position:10},s="Dise\xf1o Responsive",l={unversionedId:"tutorial-html/dise\xf1o-responsive",id:"tutorial-html/dise\xf1o-responsive",title:"Dise\xf1o Responsive",description:"El responsive, o Responsive Web Design (RWD) es un concepto de desarrollo orientado a que los sitios web se vean y comporten correctamente en todos los dispositivos y pantallas.",source:"@site/docs\\tutorial-html\\dise\xf1o-responsive.md",sourceDirName:"tutorial-html",slug:"/tutorial-html/dise\xf1o-responsive",permalink:"/explorer-course-ai/docs/tutorial-html/dise\xf1o-responsive",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Grid",permalink:"/explorer-course-ai/docs/tutorial-html/grid"},next:{title:"Bootstrap",permalink:"/explorer-course-ai/docs/tutorial-html/bootstrap"}},i={},p=[{value:"Esto se consigue combinando varios enfoques:",id:"esto-se-consigue-combinando-varios-enfoques",level:3},{value:"Im\xe1genes, media y tipograf\xeda flexibles",id:"im\xe1genes-media-y-tipograf\xeda-flexibles",level:2},{value:"Mediaqueries",id:"mediaqueries",level:2},{value:"Viewport",id:"viewport",level:2},{value:"Mobile first",id:"mobile-first",level:2}],d={toc:p};function m(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",(0,o.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"dise\xf1o-responsive"},"Dise\xf1o Responsive"),(0,t.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/BeeHAaSPVBs",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,t.kt)("p",null,"El responsive, o Responsive Web Design (RWD) es un concepto de desarrollo orientado a que los sitios web se vean y comporten correctamente en todos los dispositivos y pantallas."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"NOTA: Responsive no es solo m\xf3vil, tablet y escritorio, tambi\xe9n es un navegador que ocupe la mitad de la pantalla por alguna raz\xf3n. Por ejemplo, estamos escribiendo un art\xedculo en nuestro editor de textos y tenemos al lado una web donde consultamos informaci\xf3n.\n")),(0,t.kt)("h3",{id:"esto-se-consigue-combinando-varios-enfoques"},"Esto se consigue combinando varios enfoques:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Maquetaremos ciertas zonas usando porcentajes"),(0,t.kt)("li",{parentName:"ul"},"Ciertos elementos se ajustar\xe1n al tama\xf1o del contenedor hasta un cierto valor, es decir, se comportan como si tuviesen las medidas por porcentajes pero pudiendo marcar tama\xf1os m\xe1ximos y m\xednimos"),(0,t.kt)("li",{parentName:"ul"},'Usaremos unidades "flexibles" en ciertos casos, como ',(0,t.kt)("inlineCode",{parentName:"li"},"rem")," o ",(0,t.kt)("inlineCode",{parentName:"li"},"vw")," y ",(0,t.kt)("inlineCode",{parentName:"li"},"vh"),". Y claro, el ",(0,t.kt)("inlineCode",{parentName:"li"},"%")),(0,t.kt)("li",{parentName:"ul"},"Tenemos a nuestra disposici\xf3n unas expresiones CSS, las mediaqueries, que nos permiten aplicar una serie de reglas cuando en nuestro navegador se cumplen unas condiciones: ancho, alto, resoluci\xf3n, orientaci\xf3n..."),(0,t.kt)("li",{parentName:"ul"},"Veremos qu\xe9 es el viewport y c\xf3mo usarlo")),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://www.youtube.com/playlist?list=PLQCgNGUqLK4mW7LxW3jJdRjCnErL5rszl"},"Curso en video de Responsive Design")),(0,t.kt)("h2",{id:"im\xe1genes-media-y-tipograf\xeda-flexibles"},"Im\xe1genes, media y tipograf\xeda flexibles"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"Im\xe1genes"))),(0,t.kt)("p",null,"En este entorno Responsive las im\xe1genes y videos tienen su forma de afrontarse y aunque ambos formatos podemos dimensionarlos por porcentajes tenemos varios casos en los que la imagen o el v\xeddeo queda demasiado grande o demasiado peque\xf1o. Para ello tenemos unas propiedades que matizan el ",(0,t.kt)("inlineCode",{parentName:"p"},"width")," (ancho) o el ",(0,t.kt)("inlineCode",{parentName:"p"},"height")," (alto):"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"max-width"),(0,t.kt)("li",{parentName:"ul"},"min-width"),(0,t.kt)("li",{parentName:"ul"},"max-height"),(0,t.kt)("li",{parentName:"ul"},"min-height")),(0,t.kt)("p",null,"De esta manera no solo podemos definir un ancho/alto en porcentajes sino marcar unos l\xedmites."),(0,t.kt)("p",null,"Por ejemplo:"),(0,t.kt)("p",null,"Quiero que mi imagen se ajuste al 100% del contenedor pero solo hasta un m\xe1ximo de 600px, controlando de esa manera que se haga demasiado grande."),(0,t.kt)("p",null,"En maquetaci\xf3n responsive es s\xfaper buena idea meter las im\xe1genes de contenido en un contenedor, dar a la imagen un ancho del 100% y usar el contenedor para definir el tama\xf1o que debe tener la imagen. Esto se hace para poder controlar diferentes im\xe1genes cuando no podemos asegurar los tama\xf1os que van a tener sin que nos interfiera con la estructura."),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://codepen.io/adalab/pen/XxVGQB"},'\u25b8 Ejemplo de imagen "responsive" en Codepen')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"V\xeddeos"))),(0,t.kt)("p",null,"Los v\xeddeos son m\xe1s complicados de controlar porque la etiqueta ",(0,t.kt)("inlineCode",{parentName:"p"},"<video>"),", al contrario que la ",(0,t.kt)("inlineCode",{parentName:"p"},"<img>")," no redimensiona proporcionalmente el video, aunque hay formas de suplirlo ya sea por CSS o tirando de unas librer\xedas en JS."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"Tipograf\xeda"))),(0,t.kt)("p",null,"Para el tema de la tipograf\xeda hay varias escuelas y formas de afrontarlo seg\xfan el caso:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Una es usar unidades fijas como los p\xedxels, e indicarle en cada caso qu\xe9 tama\xf1o de fuente debe tener cada texto.Por ejemplo: en m\xf3vil mi texto b\xe1sico ser\xe1 de 18px porque la pantalla es m\xe1s peque\xf1a y quiero que se lea mejor, pero en tablet lo bajo a 16px y en escritorio lo vuelvo a poner a 18px. Aunque en pantallas muy grandes usar\xe9 20px o 24px.")),(0,t.kt)("p",null,"Tenemos unas unidades relativas como los ",(0,t.kt)("inlineCode",{parentName:"p"},"rem")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"rem:"))," es una unidad relativa al tama\xf1o de texto especificado en el elemento ra\xedz de nuestro documento que es el ",(0,t.kt)("inlineCode",{parentName:"p"},"<html>"),". De manera que si el elemento html est\xe1 a 16px (valor por defecto) ",(0,t.kt)("inlineCode",{parentName:"p"},"1rem")," equivaldr\xe1 a esos 16px."),(0,t.kt)("p",null,"Esto nos ayuda a poder ajustar todas nuestras medidas de forma proporcional solo cambiando el tama\xf1o de fuente de la etiqueta ",(0,t.kt)("inlineCode",{parentName:"p"},"<html>"),"."),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://codepen.io/adalab/pen/WadWay"},"\u25b8 Veamos un ejemplo en Codepen")," (Prueba a cambiar el tama\xf1o de fuente de la etiqueta html)."),(0,t.kt)("p",null,"\xa1En el nombre de la diosa frontender! \xbfC\xf3mo vamos a calcular los rems que corresponden a nuestros p\xedxels?\nPues con una ",(0,t.kt)("a",{parentName:"p",href:"https://offroadcode.com/rem-calculator/"},"calculadora de rem")," (por ahora)."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"EJERCICIO 1"))),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"No puedo vivir sin rems")),(0,t.kt)("p",null,"Partiendo de estos documentos:"),(0,t.kt)("p",null,"index.html"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <link rel="stylesheet" href="styles/main.css">\n  <title>:)</title>\n</head>\n<body>\n  <div class="smiley">:)</div>\n</body>\n</html>\n')),(0,t.kt)("p",null,"y main.css"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-css"},"html {\n  font-size: 16px;\n}\n.smiley {\n  width: 100px;\n  height: 100px;\n  line-height: 100px;\n  text-align: center;\n  font-family: 'courier new';\n  font-weight: bold;\n  font-size: 50px;\n  color: #424242;\n  background: #ffcc00;\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  border-radius: 50%;\n}\n")),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"Pasar las medidas en p\xedxels a rem"),(0,t.kt)("li",{parentName:"ol"},"\xbfQu\xe9 tama\xf1o de fuente tengo que poner para que mi careto mida 50x50?"),(0,t.kt)("li",{parentName:"ol"},"\xbfY para que mida 200x200?")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"Max-width, min-width, max-height, min-height."))),(0,t.kt)("p",null,'Estas propiedades que permiten "limitar" anchos y altos se pueden aplicar a casi cualquier contenedor (que admita dimensiones, como aquellos con display ',(0,t.kt)("inlineCode",{parentName:"p"},"block")," o ",(0,t.kt)("inlineCode",{parentName:"p"},"inline-block"),") de manera que podamos tener elementos que se dimensionen a base de porcentajes pero sobre los que tengamos un poco de control para que en determinados escenarios no se hagan demasiado peque\xf1os ni demasiado grandes."),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"EJERCICIO 2")),(0,t.kt)("p",null,"Ya vimos en la sesi\xf3n de flexbox, en este ",(0,t.kt)("a",{parentName:"p",href:"https://codepen.io/adalab/pen/LORKzX"},"codepen")," tenemos dos columnas, una (",(0,t.kt)("inlineCode",{parentName:"p"},"aside"),") que ocupa el 50% del ancho hasta 320px y la otra (",(0,t.kt)("inlineCode",{parentName:"p"},"main"),") que ocupa el resto:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Tirando con el rat\xf3n, redimensionar la ventana del navegador haci\xe9ndola tan peque\xf1a como para que las dos columnas ocupen lo mismo"),(0,t.kt)("li",{parentName:"ul"},"agrandar hasta que ",(0,t.kt)("inlineCode",{parentName:"li"},".aside")," se quede en 320px de ancho mientras ",(0,t.kt)("inlineCode",{parentName:"li"},".main")," ocupa el resto del espacio")),(0,t.kt)("h2",{id:"mediaqueries"},"Mediaqueries"),(0,t.kt)("p",null,(0,t.kt)("img",{parentName:"p",src:"https://storage.googleapis.com/academia-geek-general-bucket/modulo-1/modulo_1_img_46.png",alt:null}),"\nLas mediaqueries son las instrucciones que nos permiten aplicar una serie de reglas CSS cuando se cumplan una o varias condiciones. Tienen este aspecto:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-css"},"@media all and (min-width:500px) {\n    /* Reglas CSS que aplicaremos */\n}\n")),(0,t.kt)("p",null,"En el ejemplo superior le decimos que aplique unos CSS cuando estemos en una ventana de navegador de al menos 500px."),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"EJERCICIO")),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"Crea un index.html que contenga:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Viewport Sample</title>\n</head>\n<body>\n    <div class="box"></div>\n</body>\n</html>\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-css"},".box {\n    background: red;\n    height: 100px;\n}\n")),(0,t.kt)("p",null,"Veremos que el div .box ocupar\xe1 el ancho disponible y tendr\xe1 100px de alto, y fondo rojo."),(0,t.kt)("ol",{start:2},(0,t.kt)("li",{parentName:"ol"},"A\xf1adamos nuestra primera mediaquery: vamos a hacer que por encima de 550px el elemento ",(0,t.kt)("inlineCode",{parentName:"li"},".box")," tenga fondo azul. Para ello el CSS  quedar\xe1 as\xed:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-css"},".box {\n    background: red;\n    height: 100px;\n}\n\n@media all and (min-width:550px) {\n    .box {\n        background: blue;\n    }\n}\n")),(0,t.kt)("p",null,"Si ahora redimensionamos la ventana del navegador veremos que a partir de 550px de ancho nuestro elemento ",(0,t.kt)("inlineCode",{parentName:"p"},".box")," se vuelve azul."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"NOTA: A cada una de estas medidas que ponemos en los mediaqueries las llamamos breakpoints, o puntos de ruptura.\n")),(0,t.kt)("ol",{start:3},(0,t.kt)("li",{parentName:"ol"},"Abramos ahora las herramientas de desarrollo de Chrome y lancemos el simulador de dispositivos m\xf3viles. Probemos varios dispositivos o resoluciones. \xbfQu\xe9 pasa? \xbfCu\xe1ndo se vuelve azul? \xbfCu\xe1ndo se vuelve rojo?")),(0,t.kt)("p",null,"Si no lo tenemos claro los siguientes ejercicios nos va a ayudar a entenderlo mejor."),(0,t.kt)("h2",{id:"viewport"},"Viewport"),(0,t.kt)("p",null,"Aqu\xed es donde entra en juego una etiqueta que la conoc\xedamos por otros motivos pero que ahora tiene un contenido especial: el viewport."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-html"},'<meta name="viewport" content="width=device-width, initial-scale=1">\n')),(0,t.kt)("p",null,'Los dispositivos m\xf3viles (tel\xe9fonos y tablets) utilizan este "viewport" para mostrar la p\xe1gina de una forma curiosa: salvo que se le indique lo contrario intentar\xe1n mostrarla al m\xe1ximo tama\xf1o posible, haciendo suficiente zoom para permitir que las p\xe1ginas no adaptadas se puedan ver (aunque diminutas) por eso en nuestro ejemplo las mediaqueries no "funcionan".'),(0,t.kt)("p",null,"Con la etiqueta ",(0,t.kt)("inlineCode",{parentName:"p"},"meta")," viewport le decimos a estos dispositivos c\xf3mo tienen que comportarse. El ejemplo anterior es el m\xe1s t\xedpico y le dice al viewport de un dispositivo m\xf3vil que: "),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"el ancho del viewport debe coincidir con el ancho del dispositvo "),(0,t.kt)("li",{parentName:"ol"},"la escala inicial siempre ser\xe1 el 100%")),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"EJERCICIO")),(0,t.kt)("p",null,"Vamos a a\xf1adir al ",(0,t.kt)("inlineCode",{parentName:"p"},"<head>")," de nuestra p\xe1gina el tag meta viewport quedando toda nuestra p\xe1gina as\xed:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>Viewport Sample</title>\n</head>\n\n<body>\n    <div class="box"></div>\n</body>\n</html>\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-css"},".box {\n    background: red;\n    height: 100px;\n}\n\n@media all and (min-width:550px) {\n    .box {\n        background: blue;\n    }\n}\n")),(0,t.kt)("p",null,"\xbfQu\xe9 tal ahora? \xbfSi nos vamos a las herramientas de desarrollo, abrimos el simulador y probamos con diferentes dispositivos/anchos? \xbfCambia ahora de rojo a azul?"),(0,t.kt)("h2",{id:"mobile-first"},"Mobile first"),(0,t.kt)("p",null,"Hay varias formas de afrontar la maquetaci\xf3n de un proyecto responsive, la que nos parece m\xe1s adecuada es mobile first donde se plantean primero los estilos de la vista de m\xf3vil y conforme tenemos mayor tama\xf1o de pantalla sobreescribimos o ajustamos los estilos necesarios."),(0,t.kt)("p",null,"La maquetaci\xf3n mobile first da prioridad a los dispositivos con menos capacidad de pantalla, conexi\xf3n y bater\xeda de manera que, por ejemplo, se cargan im\xe1genes m\xe1s peque\xf1as que consumen muchos menos datos o se muestra una maquetaci\xf3n m\xe1s simple y adaptada a que usemos los dedos como punteros (botones y zonas clicables m\xe1s grandes). Y si luego resulta que estamos viendo la p\xe1gina en un una pantalla m\xe1s grande, gracias a las mediaqueries, podemos cargar elementos m\xe1s pesados, mostrar otros que en m\xf3vil pueden no tener sentido y adaptarlo todo a que ya se va a manejar con rat\xf3n y/o teclado."),(0,t.kt)("p",null,"Un ejemplo ser\xeda la t\xedpica p\xe1gina que tiene una primera secci\xf3n con una imagen de fondo enorme: con la maquetaci\xf3n mobile first colocar\xedamos primero un fondo adaptado a una pantalla m\xe1s peque\xf1a con el consiguiente ahorro en nuestra tarifa de datos. Si alguien la carga desde escritorio, donde suele tener una conexi\xf3n con tarifa plana, pasar\xedamos a mostrar una imagen de fondo mucho m\xe1s grande, acorde a la pantalla que est\xe9 usando. Pero nunca obligamos a quien va en el metro a descargarse una imagen descomunal de chopocientos megap\xedxels en su m\xf3vil con una tarifa de datos que se paga con sangre."),(0,t.kt)("p",null,"En el CSS esto se representa escribiendo primero los CSS que se ver\xe1n en las pantallas/ventanas de navegador m\xe1s peque\xf1as. Posteriormente a\xf1adiremos, dentro de mediaqueries, los ajustes necesarios para los tama\xf1os mayores de pantalla o ventana."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"NOTA: Recordemos que responsive no es solo tema de dispositivos. Claro que hay m\xf3viles de 320, tablets de 768 y pantallas desde 1336 a 2560 de ancho. Pero responsive tambi\xe9n es un tipo en una pantalla m\xe1s modesta, por ejemplo cuando una usuaria pone el navegador en la mitad de la pantalla mientras trabaja y en la otra mitad pone un reproductor de v\xeddeo porque est\xe1 enganchada a Juego de Tronos...\n")))}m.isMDXComponent=!0}}]);